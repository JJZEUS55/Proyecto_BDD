/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tratamientos;

import BaseDatos.ConexionMySQL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tom
 */
public class RegistrarTraramiento extends javax.swing.JFrame {

    /**
     * Creates new form RegistrarTraramiento
     */
    public RegistrarTraramiento() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLIDPaciente = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLIDDentista = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDescripcion = new javax.swing.JTextArea();
        TxtSesiones = new javax.swing.JTextField();
        jCalendario = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCActual = new javax.swing.JComboBox();
        BrnCancelar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLIDPaciente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLIDPaciente.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLIDPaciente.setText("0");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("ID paciente:");

        jLIDDentista.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLIDDentista.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLIDDentista.setText("0");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("ID Dentista:");

        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Duración del tratamiento (sesiones):");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Descripción:");

        jTDescripcion.setColumns(20);
        jTDescripcion.setRows(5);
        jScrollPane1.setViewportView(jTDescripcion);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Fecha inicio:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("¿Será tratamiento actual?");

        jCActual.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sí", "No" }));

        BrnCancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BrnCancelar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BrnCancelar.setText("Cancelar");
        BrnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BrnCancelarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(TxtSesiones, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCActual, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(75, 75, 75)
                                    .addComponent(jCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(BrnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 153, 153)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addGap(10, 10, 10)
                .addComponent(jLIDDentista, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLIDPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLIDDentista)
                    .addComponent(jLabel15)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLIDPaciente)))
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtSesiones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jCActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int actual=0;       
        ConexionMySQL mysql = new ConexionMySQL();
        Connection cn= mysql.Conectar();
        boolean correcto=true;
        String fecha="";
          if (jCalendario.getDate()==null){
            JOptionPane.showMessageDialog(null, "El formato de la fecha es incorrecta");
        }
        else{
            fecha=jCalendario.getCalendar().get(java.util.Calendar.YEAR)+"-"+(jCalendario.getCalendar().get(java.util.Calendar.MONTH)+1)+"-"+jCalendario.getCalendar().get(java.util.Calendar.DATE);        
            if (TxtSesiones.getText().length()<1){
                correcto=false;
            }
            if (jTDescripcion.getText().length()<1){
                correcto=false;
            }
            if (correcto==true){//Si todo está en orden entrará a este if
                if(((String)jCActual.getSelectedItem()).equals("Sí")){
                    actual=1;
                    try {
                        String aSQL="UPDATE tratamientos SET tratamientoActual='0' WHERE tratamientoActual='1' and idPaciente='"+jLIDPaciente.getText()+"'";
                        PreparedStatement pst=cn.prepareStatement(aSQL);
                        pst.executeUpdate();
                    }
                    catch(SQLException e){
                        JOptionPane.showMessageDialog(null,"Problema al conectar");
                    }
                }
                else{
                    actual=0;
                }
                int numeroTratamiento=1;
                try {
                    Statement s = cn.createStatement();
                    ResultSet rs = s.executeQuery("SELECT count(*) from tratamientos");     
                    if(rs.next()) {
                        numeroTratamiento+=Integer.parseInt((String)rs.getObject(1).toString());
                    }
                    rs.close();
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Problema al conectar");
                } 
                String aSQL1="insert into tratamientos value("+numeroTratamiento+","+jLIDPaciente.getText()+","+TxtSesiones.getText()+",'"+jTDescripcion.getText()+"',"+actual+",'"+fecha+"',0);";
                                try{
                                    PreparedStatement pst1=cn.prepareStatement(aSQL1);
                                    int n1=pst1.executeUpdate();
                                    if (n1>0){
                                        JOptionPane.showMessageDialog(null, "Registro del tratamiento correcto");       
                                        Tratamientos verTrat=new Tratamientos();
                                        try {
                                            Statement s1 = cn.createStatement();
                                            ResultSet rs1 = s1.executeQuery("SELECT idTratamiento,duracion,tratamientoActual,fechaInicio FROM tratamientos WHERE idPaciente = '" + jLIDPaciente.getText() + "' AND finalizado = 0");     
                                            ResultSetMetaData rsmd=rs1.getMetaData();        
                                            int numeroColumnas=rsmd.getColumnCount();
                                            DefaultTableModel modelo=new DefaultTableModel();
                                            verTrat.jTTabla.setModel(modelo);
                                            modelo.addColumn("Id Traramiento");
                                            modelo.addColumn("Duración (sesiones)");
                                            modelo.addColumn("Tratamiento actual");
                                            modelo.addColumn("Fecha de inicio");
                                            while(rs1.next()){
                                                Object [] fila=new Object[numeroColumnas];
                                                for(int y=0;y<numeroColumnas;y++){
                                                if (((String) rs1.getObject(y+1).toString()).equals("false")){
                                                    fila [y]="No";
                                                }
                                                else if (((String) rs1.getObject(y+1).toString()).equals("true")){
                                                    fila [y]="Sí";
                                                }
                                                else{
                                                    fila [y] =(String) rs1.getObject(y+1).toString();                    
                                                }
                                            }
                                            modelo.addRow(fila);
                                            }
                                            rs1.close();
                                        }
                                        catch(SQLException e){
                                            JOptionPane.showMessageDialog(null,"Problema al conectar");
                                        }        
                                        verTrat.jLIDDentista.setText(jLIDDentista.getText());        
                                        verTrat.jLIDPaciente.setText(jLIDPaciente.getText());
                                        verTrat.setLocationRelativeTo(null);
                                        verTrat.setVisible(true);
                                        this.setVisible(false);
                                    }
                                }
                                catch (SQLException ex) {
                                    JOptionPane.showMessageDialog(null,ex);
                                }  
                
            }
            else {
                JOptionPane.showMessageDialog(null, "Nada puede estar en blanco");
            }
        }
    
    

    }//GEN-LAST:event_jButton1ActionPerformed

    private void BrnCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BrnCancelarMouseClicked
        // TODO add your handling code here:
        ConexionMySQL mysql = new ConexionMySQL();
        Connection cn= mysql.Conectar();        
        Tratamientos verTrat=new Tratamientos();
        try {
            Statement s1 = cn.createStatement();
            ResultSet rs1 = s1.executeQuery("SELECT idTratamiento,duracion,tratamientoActual,fechaInicio FROM tratamientos WHERE idPaciente = '" + jLIDPaciente.getText() + "' AND finalizado = 0");     
            ResultSetMetaData rsmd=rs1.getMetaData();        
            int numeroColumnas=rsmd.getColumnCount();
            DefaultTableModel modelo=new DefaultTableModel();
            verTrat.jTTabla.setModel(modelo);
            modelo.addColumn("Id Traramiento");
            modelo.addColumn("Duración (sesiones)");
            modelo.addColumn("Tratamiento actual");
            modelo.addColumn("Fecha de inicio");
            /**for(int x=1;x<=numeroColumnas;x++){
                modelo.addColumn(rsmd.getColumnName(x));
            }     */
            while(rs1.next()){
                Object [] fila=new Object[numeroColumnas];
                for(int y=0;y<numeroColumnas;y++){
                if (((String) rs1.getObject(y+1).toString()).equals("false")){
                    fila [y]="No";
                }
                else if (((String) rs1.getObject(y+1).toString()).equals("true")){
                    fila [y]="Sí";
                }
                else{
                    fila [y] =(String) rs1.getObject(y+1).toString();                    
                }
            }
            modelo.addRow(fila);
            }
            rs1.close();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null,"Problema al conectar");
        }        
        verTrat.jLIDDentista.setText(jLIDDentista.getText());        
        verTrat.jLIDPaciente.setText(jLIDPaciente.getText());
        verTrat.setLocationRelativeTo(null);
        verTrat.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BrnCancelarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarTraramiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarTraramiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarTraramiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarTraramiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarTraramiento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BrnCancelar;
    private javax.swing.JTextField TxtSesiones;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCActual;
    private com.toedter.calendar.JDateChooser jCalendario;
    public javax.swing.JLabel jLIDDentista;
    public javax.swing.JLabel jLIDPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTDescripcion;
    // End of variables declaration//GEN-END:variables
}
