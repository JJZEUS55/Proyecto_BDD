/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RegistrarPaciente;
import BaseDatos.ConexionMySQL;
import Citas.Citas;
import Paciente.Paciente;
import Pacientes.Pacientes;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferInt;
import java.awt.image.DirectColorModel;
import java.awt.image.PixelGrabber;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Filter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tom
 */
public class RegistrarPaciente extends javax.swing.JFrame {
   /**
     * Se le establece el texto que se mostrara en la ventana de "Examinar"
     * y el tipo de formatos que aceptara (en este caso Jpg)
     */
private FileNameExtensionFilter Filter = new FileNameExtensionFilter("Archivo de imagen ","jpg");
     /**
     * Se especifica el formato de los colores en RGB
     */
private static final int[] RGB_MASKS = {0xFF0000, 0xFF00, 0xFF};
private static final ColorModel RGB_OPAQUE =
    new DirectColorModel(32, RGB_MASKS[0], RGB_MASKS[1], RGB_MASKS[2]);
     /**
     * Se crea una variable llamada "rutaimagen" la cual obtendra la direccion (Url)
     * obtenida de la ventana Examinar
     */
String rutaimagen;

     /**
     * Se crea una variable string para la cual cambiara con el boton de "Ver datos" de cada alumno
     * esto quiere decir que dependiendo de que alumno quieras ver sus datos sera su valor,
     * cada boton le asigna un valor diferente
     */
    public RegistrarPaciente() {
        initComponents();
        rutaimagen="";
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Titulo = new javax.swing.JLabel();
        jLFoto = new javax.swing.JLabel();
        BtnExaminar = new javax.swing.JButton();
        TxtNombres = new javax.swing.JTextField();
        TxtApellidos = new javax.swing.JTextField();
        TxtEdad = new javax.swing.JTextField();
        TxtSexo = new javax.swing.JTextField();
        TxtDomicilio = new javax.swing.JTextField();
        TxtCurp = new javax.swing.JTextField();
        TxtTelefono = new javax.swing.JTextField();
        TxtMail = new javax.swing.JTextField();
        JLNombre = new javax.swing.JLabel();
        JLApellidos = new javax.swing.JLabel();
        JLEdad = new javax.swing.JLabel();
        JSexo = new javax.swing.JLabel();
        JLDomicilio = new javax.swing.JLabel();
        JLCurp = new javax.swing.JLabel();
        BtnRegistrar = new javax.swing.JButton();
        JLCancelar = new javax.swing.JLabel();
        JLCurp1 = new javax.swing.JLabel();
        JLCurp2 = new javax.swing.JLabel();
        jLIDDentista = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Titulo.setFont(new java.awt.Font("Vani", 3, 20)); // NOI18N
        Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo.setText("Registrar a nuevo paciente");

        jLFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RegistrarPaciente/icono.PNG"))); // NOI18N

        BtnExaminar.setText("Examinar imagenes");
        BtnExaminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnExaminarActionPerformed(evt);
            }
        });

        TxtNombres.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        TxtApellidos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        TxtEdad.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        TxtSexo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        TxtDomicilio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        TxtCurp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        TxtTelefono.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        TxtMail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        JLNombre.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JLNombre.setText("Nombre(s)");

        JLApellidos.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JLApellidos.setText("Apellidos");

        JLEdad.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JLEdad.setText("Edad");

        JSexo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JSexo.setText("Sexo");

        JLDomicilio.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JLDomicilio.setText("Domicilio");

        JLCurp.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JLCurp.setText("CURP");

        BtnRegistrar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BtnRegistrar.setText("Registrar");
        BtnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRegistrarActionPerformed(evt);
            }
        });

        JLCancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        JLCancelar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLCancelar.setText("Cancelar");
        JLCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLCancelarMouseClicked(evt);
            }
        });

        JLCurp1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JLCurp1.setText("Telefono");

        JLCurp2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JLCurp2.setText("e-mail");

        jLIDDentista.setText("0");

        jLabel3.setText("ID Dentista:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(JLCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(BtnRegistrar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(JLCurp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLCurp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLDomicilio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JSexo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLCurp2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(JLEdad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLApellidos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TxtMail, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtCurp, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLFoto)
                        .addGap(42, 42, 42)
                        .addComponent(BtnExaminar)))
                .addGap(89, 89, 89))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLIDDentista)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLIDDentista))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Titulo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLFoto))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(BtnExaminar)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLApellidos)
                            .addComponent(TxtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLEdad)
                            .addComponent(TxtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JSexo)
                            .addComponent(TxtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLDomicilio)
                            .addComponent(TxtDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(TxtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLCurp)
                    .addComponent(TxtCurp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLCurp1)
                    .addComponent(TxtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLCurp2)
                    .addComponent(TxtMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnRegistrar))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
int numeroPaciente=1;

    private void JLCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JLCancelarMouseClicked
        // Boton de cancelar
        Pacientes cancelar=new Pacientes();
        JOptionPane.showMessageDialog(null,"No se registró ningun paciente","Cancelar",JOptionPane.INFORMATION_MESSAGE);  
        cancelar.setLocationRelativeTo(null);
        cancelar.jLIDDentista.setText(jLIDDentista.getText());
        ConexionMySQL mysql = new ConexionMySQL();
        Connection cn= mysql.Conectar();
        try {
                                    Statement s1 = cn.createStatement();
                                    ResultSet rs1 = s1.executeQuery("SELECT idPaciente,nombres FROM paciente WHERE dentistaAsignado = '" + jLIDDentista.getText() + "' AND mostrar = 1");     
                                    ResultSetMetaData rsmd=rs1.getMetaData();        
                                    int numeroColumnas=rsmd.getColumnCount();
                                    DefaultTableModel modelo=new DefaultTableModel();
                                    cancelar.TablaPacientes.setModel(modelo);
                                    for(int x=1;x<=numeroColumnas;x++){
                                        modelo.addColumn(rsmd.getColumnName(x));
                                    }        
                                    while(rs1.next()){
                                     Object [] fila=new Object[numeroColumnas];
                                     for(int y=0;y<numeroColumnas;y++){
                                        fila [y] =(String) rs1.getObject(y+1).toString();
                                    }
                                     modelo.addRow(fila);
                                    }
                                     rs1.close();
                                }
                                catch(SQLException e){
                                    JOptionPane.showMessageDialog(null,"Problema al conectar");
                                }
        cancelar.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_JLCancelarMouseClicked

    private void BtnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRegistrarActionPerformed
        // Boton de registrar
        
        ConexionMySQL mysql = new ConexionMySQL();
        Connection cn= mysql.Conectar();
        numeroPaciente=1;
        try {
            Statement s = cn.createStatement();
            ResultSet rs = s.executeQuery("SELECT count(*) from paciente");     
            if(rs.next()) {
                    numeroPaciente+=Integer.parseInt((String)rs.getObject(1).toString());
                    JOptionPane.showMessageDialog(null,"El numero de este paciente será el "+numeroPaciente);
            }
            rs.close();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null,"Problema al conectar");
        } 
        
        
        int i=0;
        boolean bandera=false;
        if((TxtNombres.getText().length()!=0)&&(TxtApellidos.getText().length()!=0)&&(TxtEdad.getText().length()!=0)&&(TxtSexo.getText().length()!=0)&&(TxtDomicilio.getText().length()!=0)&&(TxtCurp.getText().length()!=0)&&(TxtTelefono.getText().length()!=0)&&(TxtMail.getText().length()!=0)){
            JOptionPane.showMessageDialog(null,"No hay ningun campo vacio");
            for(i=0;i<(TxtNombres.getText()).length()&&bandera==false;i++){
                if((TxtNombres.getText()).charAt(i)>='0'&&(TxtNombres.getText()).charAt(i)<='9'){
                    bandera=true;
                    JOptionPane.showMessageDialog(null,"El nombre no puede contener numeros");
                }
            }
            for(i=0;i<(TxtApellidos.getText()).length()&&bandera==false;i++){
                if((TxtApellidos.getText()).charAt(i)>='0'&&(TxtApellidos.getText()).charAt(i)<='9'){
                    bandera=true;
                    JOptionPane.showMessageDialog(null,"Los apellidos no pueden contener numeros");
                }
            }
            for(i=0;i<(TxtEdad.getText()).length()&&bandera==false;i++){
                if((TxtEdad.getText()).charAt(i)<'0'||(TxtEdad.getText()).charAt(i)>'9'){
                    bandera=true;
                    JOptionPane.showMessageDialog(null,"La edad solo admite numeros");
                }
            }
            if(((Integer.parseInt(String.valueOf(TxtEdad.getText()))<5)||(Integer.parseInt(String.valueOf(TxtEdad.getText()))>100))&&(bandera==false)){
                bandera=true;
                JOptionPane.showMessageDialog(null,"La edad debe estar entre 5 y 100 años");
            }
            if((!TxtSexo.getText().toLowerCase().equals("hombre"))&&(!TxtSexo.getText().toLowerCase().equals("mujer"))&&(bandera==false)){
                bandera=true;
                JOptionPane.showMessageDialog(null,"Solo puede haber sexo 'hombre' o 'mujer'");
            }
            if (TxtCurp.getText().length()!=18&&(bandera==false)){
                bandera=true;
                JOptionPane.showMessageDialog(null,"El CURP se compone de 18 digitos siempre");
            }
            for(i=0;i<(TxtTelefono.getText()).length()&&bandera==false;i++){
                if((TxtTelefono.getText()).charAt(i)<'0'||(TxtTelefono.getText()).charAt(i)>'9'){
                    bandera=true;
                    JOptionPane.showMessageDialog(null,"El telefono solo admite numeros");
                }
            }
            
            
            if(bandera==false){ 
            String aSQL="insert into paciente (idPaciente,dentistaAsignado,nombres,apellidos,edad,sexo,domicilio,CURP,telefono,email,mostrar,cantidadpagada)"+"VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
             try {
                            PreparedStatement pst=cn.prepareStatement(aSQL);
                            pst.setString(1, ""+numeroPaciente);
                            pst.setString(2, jLIDDentista.getText()); 
                            pst.setString(3, TxtNombres.getText()); 
                            pst.setString(4, TxtApellidos.getText()); 
                            pst.setString(5, TxtEdad.getText()); 
                            pst.setString(6, ""+TxtSexo.getText().toUpperCase().charAt(0)); 
                            pst.setString(7, TxtDomicilio.getText()); 
                            pst.setString(8, TxtCurp.getText());    
                            pst.setString(9, TxtTelefono.getText());                          
                            pst.setString(10, TxtMail.getText()); 
                            pst.setString(11, "1"); 
                            pst.setString(12, "0"); 
                            int n =pst.executeUpdate();
                            if (n>0)
                            { 
                                /**Aqui va el codigo para registrar el odontograma*/
                                String aSQL1="insert into odontograma value("+numeroPaciente+",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);";
                                try{
                                    PreparedStatement pst1=cn.prepareStatement(aSQL1);
                                    int n1=pst1.executeUpdate();
                                    if (n1>0){
                                        JOptionPane.showMessageDialog(null, "correcto");
                                    }
                                }
                                catch (SQLException ex) {
                                    JOptionPane.showMessageDialog(null,ex);
                                }   
                                
                                int seleccion = -1;
                                seleccion = JOptionPane.showOptionDialog(null,"Seleccione opcion","Datos correctos, seleccione una opción",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[] { "Asignarle alguna cita", "Regresar a la lista de pacientes", "Abrir paciente" }, "Asignarle alguna cita");
                                if (seleccion ==0){
                                    JOptionPane.showMessageDialog(null,"Asignar una cita ");
                                    Citas abrir=new Citas();
                                    abrir.setLocationRelativeTo(null);
                                    abrir.jLIDDentista.setText(jLIDDentista.getText());
                                    abrir.jLIDPaciente.setText(""+numeroPaciente);
                                     abrir.setVisible(true);
                                     this.setVisible(false);
                                }
                                else if (seleccion ==1){
                                    JOptionPane.showMessageDialog(null,"Paciente registrado");
                                    Pacientes registrar=new Pacientes();                                
                                    registrar.setLocationRelativeTo(null);
                                    registrar.jLIDDentista.setText(jLIDDentista.getText());
                                    try {
                                        Statement s1 = cn.createStatement();
                                        ResultSet rs1 = s1.executeQuery("SELECT idPaciente,nombres FROM paciente WHERE dentistaAsignado = '" + jLIDDentista.getText() + "' AND mostrar = 1");     
                                        ResultSetMetaData rsmd=rs1.getMetaData();        
                                        int numeroColumnas=rsmd.getColumnCount();
                                        DefaultTableModel modelo=new DefaultTableModel();
                                        registrar.TablaPacientes.setModel(modelo);
                                        for(int x=1;x<=numeroColumnas;x++){
                                            modelo.addColumn(rsmd.getColumnName(x));
                                        }        
                                        while(rs1.next()){
                                         Object [] fila=new Object[numeroColumnas];
                                         for(int y=0;y<numeroColumnas;y++){
                                            fila [y] =(String) rs1.getObject(y+1).toString();
                                        }
                                         modelo.addRow(fila);
                                        }
                                         rs1.close();
                                    }
                                    catch(SQLException e){
                                        JOptionPane.showMessageDialog(null,"Problema al conectar");
                                    }
                                    registrar.setVisible(true);
                                    this.setVisible(false);
                                }
                                else if (seleccion ==2){
                                    JOptionPane.showMessageDialog(null,"Abrir paciente");

                                    boolean i1=false;
                                    try {
                                        Statement s1 = cn.createStatement();
                                        ResultSet rs1 = s1.executeQuery("SELECT nombres,apellidos,edad,sexo,domicilio,curp FROM paciente WHERE dentistaAsignado = '" + jLIDDentista.getText() + "' AND mostrar = 1 AND idPaciente = '"+numeroPaciente+"'"); 
                                        while(rs1.next()){
                                            String sFichero = "src\\ImagenesPaciente\\"+numeroPaciente+".jpg";
                                            File fichero = new File(sFichero);
                                            ImageIcon icon;
                                            if (fichero.exists())
                                            {
                                              icon=new ImageIcon("src\\ImagenesPaciente\\"+numeroPaciente+".jpg");  
                                            }
                                            else
                                            {
                                               icon=new ImageIcon("src\\ImagenesPaciente\\SinImagen.png");  
                                            }
                                            Image img= icon.getImage();
                                            Image newimg = img.getScaledInstance(150, 175, java.awt.Image.SCALE_SMOOTH);
                                            ImageIcon newIcon = new ImageIcon(newimg);
                                            Paciente verPaciente=new Paciente();
                                            verPaciente.JLNombre1.setText((String) rs1.getObject(1).toString());
                                            verPaciente.JLApellidos1.setText((String) rs1.getObject(2).toString());
                                            verPaciente.JLEdad1.setText((String) rs1.getObject(3).toString());
                                            verPaciente.JSexo1.setText((String) rs1.getObject(4));
                                            verPaciente.JLDomicilio1.setText((String) rs1.getObject(5).toString());
                                            verPaciente.JLCurp1.setText((String) rs1.getObject(6).toString());
                                            verPaciente.jLimagen.setIcon(newIcon);
                                            verPaciente.jLimagen.setSize(150,175);   
                                            verPaciente.setLocationRelativeTo(null);
                                            verPaciente.jLIDDentista.setText(jLIDDentista.getText());
                                            verPaciente.jLIDPaciente.setText(""+numeroPaciente);
                                            verPaciente.setTitle("Información de: "+rs1.getObject(1).toString());
                                            verPaciente.setVisible(true);
                                            this.setVisible(false);
                                            i1=true;
                                        }
                                        if(i1==false){
                                            JOptionPane.showMessageDialog(null,"El paciente no existe o le corresponde a otro doctor");
                                        }
                                        rs1.close();
                                    }
                                        catch(SQLException e){
                                            JOptionPane.showMessageDialog(null,"Problema al conectar");
                                        } 
                                }                            
                                 
                            }        
                        } 
                        catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null,ex);
                        }        
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"No puedes dejar ningun campo vacio");
        }
        
        
        
    }//GEN-LAST:event_BtnRegistrarActionPerformed

    private void BtnExaminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnExaminarActionPerformed
        // TODO add your handling code here:
         // Crear objeto JFileChooser xD
        JFileChooser dlg = new JFileChooser();
        // Del objeto creado llamar al metodo setFileFilter
        dlg.setFileFilter(Filter);
        //Abrimos la ventana de dialogo para escoger la imagen
        int option = dlg.showOpenDialog(this);
        //Si hacemos click derecho en el boton Abrir
        if(option==JFileChooser.APPROVE_OPTION){
            //Obtener el nombre del archivo seleccionado
            String fil = dlg.getSelectedFile().getPath();
            //Obtener la direccion donde se guardara la imagen
            jLFoto.setIcon(new ImageIcon(fil));
            // Modificamos la imagen
            ImageIcon icon=new ImageIcon(fil);
            //Extrae la imagen del icono
            Image img= icon.getImage();
            //Cambiando tamaño de nuestra imagen
            Image newimg = img.getScaledInstance(150, 175, java.awt.Image.SCALE_SMOOTH);
            //Se genera el imageicon con nuestra imagen
            ImageIcon newIcon = new ImageIcon(newimg);
            jLFoto.setIcon(newIcon);
            jLFoto.setSize(150,175);
            rutaimagen=fil;
            String url=rutaimagen;
            Image img2 = Toolkit.getDefaultToolkit().createImage(url);
            Image img1 = img2.getScaledInstance(150, 175, Image.SCALE_DEFAULT);
            /*conexion con MYSQL*/
            ConexionMySQL mysql = new ConexionMySQL();
            Connection cn= mysql.Conectar();
            numeroPaciente=1;
            try {
                Statement s = cn.createStatement();
                ResultSet rs = s.executeQuery("SELECT count(*) from paciente");     
                if(rs.next()) {
                    numeroPaciente+=Integer.parseInt((String)rs.getObject(1).toString());
                    JOptionPane.showMessageDialog(null,"Imagen cargada correctamente ");
                    String to="src\\ImagenesPaciente\\"+numeroPaciente+".jpg";
                    PixelGrabber pg = new PixelGrabber(img1, 0, 0, -1, -1, true);
                    try {
                        pg.grabPixels();
                    } 
                    catch (InterruptedException ex) {
                        Logger.getLogger(RegistrarPaciente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    int width = pg.getWidth(), height = pg.getHeight();
                    DataBuffer buffer = new DataBufferInt((int[]) pg.getPixels(), pg.getWidth() * pg.getHeight());
                    WritableRaster raster = Raster.createPackedRaster(buffer, width, height, width, RGB_MASKS, null);
                    BufferedImage bi = new BufferedImage(RGB_OPAQUE, raster, false, null);
                    try {
                        ImageIO.write(bi,"jpg", new File(to));
                    } 
                    catch (IOException ex) {
                        Logger.getLogger(RegistrarPaciente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                rs.close();
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(null,"Problema al conectar");
            }       
            rutaimagen="";
        }
        else {
            JOptionPane.showMessageDialog(null,"No has elegido ninguna Opción");
        }
    }//GEN-LAST:event_BtnExaminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnExaminar;
    private javax.swing.JButton BtnRegistrar;
    private javax.swing.JLabel JLApellidos;
    private javax.swing.JLabel JLCancelar;
    private javax.swing.JLabel JLCurp;
    private javax.swing.JLabel JLCurp1;
    private javax.swing.JLabel JLCurp2;
    private javax.swing.JLabel JLDomicilio;
    private javax.swing.JLabel JLEdad;
    private javax.swing.JLabel JLNombre;
    private javax.swing.JLabel JSexo;
    private javax.swing.JLabel Titulo;
    private javax.swing.JTextField TxtApellidos;
    private javax.swing.JTextField TxtCurp;
    private javax.swing.JTextField TxtDomicilio;
    private javax.swing.JTextField TxtEdad;
    private javax.swing.JTextField TxtMail;
    private javax.swing.JTextField TxtNombres;
    private javax.swing.JTextField TxtSexo;
    private javax.swing.JTextField TxtTelefono;
    private javax.swing.JLabel jLFoto;
    public javax.swing.JLabel jLIDDentista;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
