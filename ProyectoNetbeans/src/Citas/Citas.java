/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Citas;

import BaseDatos.ConexionMySQL;
import Paciente.Paciente;
import java.awt.Image;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Tom
 */
public class Citas extends javax.swing.JFrame {

    /**
     * Creates new form Citas
     */
    public Citas() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Ingresar nueva cita");
        /**Para remover items
         * 
         * jCHora.removeItem("12:30");    
        * jCHora.removeItem("13:30");  
        * jCHora.removeItem("14:00");
        */
        jCHora.setEnabled(false);  
        this.setTitle("Agenda una nueva cita");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLIDDentista = new javax.swing.JLabel();
        jLIDPaciente = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCHora = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDescripcion = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jCalendario = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 440));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("ID dentista:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ID paciente:");

        jLIDDentista.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLIDDentista.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLIDDentista.setText("1");

        jLIDPaciente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLIDPaciente.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLIDPaciente.setText("3");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Fecha:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Hora:");

        jCHora.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8:00", "8:30", "9:00", "9:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30" }));
        jCHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCHoraActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Cancelar");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("Agendar siguiente cita");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Descripci√≥n:");

        jTDescripcion.setColumns(20);
        jTDescripcion.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        jTDescripcion.setRows(5);
        jScrollPane1.setViewportView(jTDescripcion);

        jButton2.setText("Checar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 112, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLIDDentista, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCHora, 0, 149, Short.MAX_VALUE)
                            .addComponent(jCalendario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLIDPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(51, 51, 51))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLIDDentista)
                    .addComponent(jLIDPaciente))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        String fecha="";
    private void jCHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCHoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCHoraActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int hora=8;
        boolean media=false;
        int i=0;
        for(i=8;i<=20;i++){
            jCHora.removeItem(i+":00"); 
            jCHora.removeItem(i+":30");             
            jCHora.addItem(i+":00"); 
            jCHora.addItem(i+":30"); 
        }
        if (jCalendario.getDate()==null){
            JOptionPane.showMessageDialog(null, "El formato de la fecha es incorrecta");
        }
        else{
            fecha=jCalendario.getCalendar().get(java.util.Calendar.YEAR)+"-"+(jCalendario.getCalendar().get(java.util.Calendar.MONTH)+1)+"-"+jCalendario.getCalendar().get(java.util.Calendar.DATE);        
            JOptionPane.showMessageDialog(null, "Selecciona la hora del dia: "+fecha);
            ConexionMySQL mysql = new ConexionMySQL();
            Connection cn= mysql.Conectar();
            try {
                Statement s1 = cn.createStatement();
                ResultSet rs1 = s1.executeQuery("SELECT hora,media from citas WHERE fecha = '" + fecha + "'"); 
                while (rs1.next()){
                    hora=Integer.parseInt(String.valueOf(rs1.getObject(1)));
                    media=Boolean.valueOf(String.valueOf(rs1.getObject(2)));
                    String horasAgendadas;
                    if (media==false)
                        horasAgendadas=hora+":00";
                    else
                        horasAgendadas=hora+":30";
                    jCHora.removeItem(horasAgendadas); 
                    JOptionPane.showMessageDialog(null, "La hora eliminada ser√°: "+horasAgendadas);
                }
                rs1.close();
            }
            catch(SQLException e){
            JOptionPane.showMessageDialog(null,"Problema al conectar");
            }
            jCHora.setEnabled(true);   
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // Boton de cancelar
       ConexionMySQL mysql = new ConexionMySQL();
       Connection cn= mysql.Conectar();
        
        boolean i=false;
        try {
            Statement s1 = cn.createStatement();
            ResultSet rs1 = s1.executeQuery("SELECT nombres,apellidos,edad,sexo,domicilio,curp FROM paciente WHERE dentistaAsignado = '" + jLIDDentista.getText() + "' AND mostrar = 1 AND idPaciente = '"+jLIDPaciente.getText()+"'"); 
            while(rs1.next()){
                String sFichero = "src\\ImagenesPaciente\\"+jLIDPaciente.getText()+".jpg";
                File fichero = new File(sFichero);
                ImageIcon icon;
                if (fichero.exists())
                {
                  icon=new ImageIcon("src\\ImagenesPaciente\\"+jLIDPaciente.getText()+".jpg");  
                }
                else
                {
                   icon=new ImageIcon("src\\ImagenesPaciente\\SinImagen.png");  
                }
                Image img= icon.getImage();
                Image newimg = img.getScaledInstance(150, 175, java.awt.Image.SCALE_SMOOTH);
                ImageIcon newIcon = new ImageIcon(newimg);
                Paciente verPaciente=new Paciente();
                try {
                    Statement s2 = cn.createStatement();
                    ResultSet rs2 = s2.executeQuery("SELECT fecha,Descripci√≥n FROM citas WHERE idPaciente = '"+jLIDPaciente.getText()+"' AND actual='1'"); 
                    while(rs2.next()){
                        verPaciente.jLFecha.setText((String) rs2.getObject(1).toString());
                        verPaciente.jTMotivo.setText((String) rs2.getObject(2).toString());
                    }
                    rs2.close();
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Problema al conectar");
                } 
                verPaciente.JLNombre1.setText((String) rs1.getObject(1).toString());
                verPaciente.JLApellidos1.setText((String) rs1.getObject(2).toString());
                verPaciente.JLEdad1.setText((String) rs1.getObject(3).toString());
                verPaciente.JSexo1.setText((String) rs1.getObject(4));
                verPaciente.JLDomicilio1.setText((String) rs1.getObject(5).toString());
                verPaciente.JLCurp1.setText((String) rs1.getObject(6).toString());
                verPaciente.jLimagen.setIcon(newIcon);
                verPaciente.jLimagen.setSize(150,175);   
                verPaciente.setLocationRelativeTo(null);
                verPaciente.jLIDDentista.setText(jLIDDentista.getText());
                verPaciente.jLIDPaciente.setText(jLIDPaciente.getText());
                // COSTO 
                float cantidadPagada=0;
                float cantidadDebida=0;                
                DecimalFormat df = new DecimalFormat("0.00"); 
                try {
                    Statement s = cn.createStatement();
                    ResultSet rs = s.executeQuery("SELECT cantidadPagada FROM paciente WHERE idPaciente = '"+jLIDPaciente.getText()+"'"); 
                    while(rs.next()){
                        cantidadPagada=Float.parseFloat((String) rs.getObject(1).toString());
                    }
                    rs.close();
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Problema al conectar");
                }           
                try {
                    Statement s = cn.createStatement();
                    ResultSet rs = s.executeQuery("SELECT cantidad FROM costos WHERE idPaciente = '"+jLIDPaciente.getText()+"'"); 
                    while(rs.next()){
                        cantidadDebida+=Float.parseFloat((String) rs.getObject(1).toString());
                    }
                    rs.close();
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Problema al conectar");
                }    
                verPaciente.jLCantidad.setText("$"+df.format(cantidadDebida-cantidadPagada));
                //Aqui acaba costo
                verPaciente.setVisible(true);
                this.setVisible(false);
                i=true;
            }
            if(i==false){
                JOptionPane.showMessageDialog(null,"Error");
            }
            rs1.close();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null,"Problema al conectar");
        } 
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String hora1=(String) jCHora.getSelectedItem();
        int hora2;
        int min;
        if(hora1.length()==4){
            hora2=Integer.parseInt(""+hora1.charAt(0));
            min=(Integer.parseInt(""+hora1.charAt(2)))/3;            
        }
        else {
            hora2=Integer.parseInt((hora1.charAt(0))+""+(hora1.charAt(1)));
             min=(Integer.parseInt(""+hora1.charAt(3)))/3; 
        }
        if(fecha.length()>4&&jTDescripcion.getText().length()>0){
            JOptionPane.showMessageDialog(null, "La Cita ser√° el dia: "+fecha+"\nA las: "+hora2+":"+min*3+"0\nY la raz√≥n es: "+jTDescripcion.getText());
            ConexionMySQL mysql = new ConexionMySQL();
            Connection cn= mysql.Conectar();   
            try {
                String aSQL="UPDATE citas SET actual='0' WHERE actual='1' and idPaciente='"+jLIDPaciente.getText()+"'";
                PreparedStatement pst=cn.prepareStatement(aSQL);
                pst.executeUpdate();
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(null,"Problema al conectar");
            }
            String aSQL="insert into citas (idDentista,idPaciente,fecha,hora,media,actual,Descripci√≥n)"+"VALUES (?,?,?,?,?,?,?)";
            try {
                PreparedStatement pst=cn.prepareStatement(aSQL);
                pst.setString(1, jLIDDentista.getText());
                pst.setString(2, jLIDPaciente.getText()); 
                pst.setString(3, fecha); 
                pst.setString(4, ""+hora2); 
                pst.setString(5, ""+min); 
                pst.setString(6, ""+1); 
                pst.setString(7, jTDescripcion.getText()); 
                int n =pst.executeUpdate();
                if (n>0)
                { 
                    JOptionPane.showMessageDialog(null,"Cita generada exitosamente, a partir de ahora esta ser√° la actual");
                     boolean i=false;
                     try {
                        Statement s1 = cn.createStatement();
                        ResultSet rs1 = s1.executeQuery("SELECT nombres,apellidos,edad,sexo,domicilio,curp FROM paciente WHERE dentistaAsignado = '" + jLIDDentista.getText() + "' AND mostrar = 1 AND idPaciente = '"+jLIDPaciente.getText()+"'"); 
                        while(rs1.next()){
                            String sFichero = "src\\ImagenesPaciente\\"+jLIDPaciente.getText()+".jpg";
                            File fichero = new File(sFichero);
                            ImageIcon icon;
                            if (fichero.exists())
                            {
                              icon=new ImageIcon("src\\ImagenesPaciente\\"+jLIDPaciente.getText()+".jpg");  
                            }
                            else
                            {
                               icon=new ImageIcon("src\\ImagenesPaciente\\SinImagen.png");  
                            }
                            Image img= icon.getImage();
                            Image newimg = img.getScaledInstance(150, 175, java.awt.Image.SCALE_SMOOTH);
                            ImageIcon newIcon = new ImageIcon(newimg);
                            Paciente verPaciente=new Paciente();
                            try {
                                Statement s2 = cn.createStatement();
                                ResultSet rs2 = s2.executeQuery("SELECT fecha,Descripci√≥n FROM citas WHERE idPaciente = '"+jLIDPaciente.getText()+"' AND actual='1'"); 
                                while(rs2.next()){
                                    verPaciente.jLFecha.setText((String) rs2.getObject(1).toString());
                                    verPaciente.jTMotivo.setText((String) rs2.getObject(2).toString());
                                }
                                rs2.close();
                            }
                            catch(SQLException e){
                                JOptionPane.showMessageDialog(null,"Problema al conectar");
                            } 
                            verPaciente.JLNombre1.setText((String) rs1.getObject(1).toString());
                            verPaciente.JLApellidos1.setText((String) rs1.getObject(2).toString());
                            verPaciente.JLEdad1.setText((String) rs1.getObject(3).toString());
                            verPaciente.JSexo1.setText((String) rs1.getObject(4));
                            verPaciente.JLDomicilio1.setText((String) rs1.getObject(5).toString());
                            verPaciente.JLCurp1.setText((String) rs1.getObject(6).toString());
                            verPaciente.jLimagen.setIcon(newIcon);
                            verPaciente.jLimagen.setSize(150,175);   
                            verPaciente.setLocationRelativeTo(null);
                            verPaciente.jLIDDentista.setText(jLIDDentista.getText());
                            verPaciente.jLIDPaciente.setText(jLIDPaciente.getText());
                            // COSTO 
                            float cantidadPagada=0;
                            float cantidadDebida=0;                
                            DecimalFormat df = new DecimalFormat("0.00"); 
                            try {
                                Statement s = cn.createStatement();
                                ResultSet rs = s.executeQuery("SELECT cantidadPagada FROM paciente WHERE idPaciente = '"+jLIDPaciente.getText()+"'"); 
                                while(rs.next()){
                                    cantidadPagada=Float.parseFloat((String) rs.getObject(1).toString());
                                }
                                rs.close();
                            }
                            catch(SQLException e){
                                JOptionPane.showMessageDialog(null,"Problema al conectar");
                            }           
                            try {
                                Statement s = cn.createStatement();
                                ResultSet rs = s.executeQuery("SELECT cantidad FROM costos WHERE idPaciente = '"+jLIDPaciente.getText()+"'"); 
                                while(rs.next()){
                                    cantidadDebida+=Float.parseFloat((String) rs.getObject(1).toString());
                                }
                                rs.close();
                            }
                            catch(SQLException e){
                                JOptionPane.showMessageDialog(null,"Problema al conectar");
                            }    
                            verPaciente.jLCantidad.setText("$"+df.format(cantidadDebida-cantidadPagada));
                            //Aqui acaba costo
                            verPaciente.setVisible(true);
                            this.setVisible(false);
                            i=true;
                        }
                        if(i==false){
                            JOptionPane.showMessageDialog(null,"Error");
                        }
                        rs1.close();
                    }
                    catch(SQLException e){
                        JOptionPane.showMessageDialog(null,"Problema al conectar");
                    } 
                }
                else                
                { 
                    JOptionPane.showMessageDialog(null,"No se pudo realizar la operaci√≥n\nComprueba los datos");
                }
            }
            catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }  
        }
        else{
            JOptionPane.showMessageDialog(null, "No puedes dejar nada en blanco o poner datos incorrectos");
        }
              
           
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Citas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jCHora;
    private com.toedter.calendar.JDateChooser jCalendario;
    public javax.swing.JLabel jLIDDentista;
    public javax.swing.JLabel jLIDPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTDescripcion;
    // End of variables declaration//GEN-END:variables
}
